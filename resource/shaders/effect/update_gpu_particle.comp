#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable

#include "../scene_constants.glsl"
#include "../utility.glsl"
#include "process_gpu_particle_common.glsl"

layout(binding = 0) uniform SceneConstants
{
    SCENE_CONSTANTS scene_constants;
};
layout(binding = 1) uniform ViewConstants
{
    VIEW_CONSTANTS view_constants;
};
layout(binding = 2) uniform sampler2D textureSceneDepth;
layout(binding = 3) uniform sampler2D textureHeightMap;
layout(binding = 4) buffer GpuParticleStaticConstantsBuffer
{
    GpuParticleStaticConstants gpu_particle_static_constants[];
};
layout(binding = 5) buffer GpuParticleDynamicConstantsBuffer
{
    GpuParticleDynamicConstants gpu_particle_dynamic_constants[];
};
layout(binding = 6) buffer GpuParticleEmitterIndexBuffer
{
    int gpu_particle_emitter_index_buffer[];
};
layout(binding = 7) buffer GpuParticleCountBuffer
{
    GpuParticleCountBufferData gpu_particle_count_buffer[];
};
layout(binding = 8) buffer GpuParticleUpdateBuffer
{
    GpuParticleUpdateBufferData gpu_particle_update_buffer[];
};

layout( push_constant ) uniform PushConstant_UpdateGpuParticle
{
    int _gpu_particle_count_buffer_offset;
    int _prev_gpu_particle_update_buffer_offset;
    int _gpu_particle_update_buffer_offset;
    int _process_particle_count;
} pushConstant;

layout(local_size_x=PROCESS_GPU_PARTICLE_WORK_GROUP_SIZE, local_size_y=1, local_size_z=1) in;

void spawn_particle_func(inout GpuParticleUpdateBufferData particle_buffer, uint update_buffer_index, int emitter_index)
{
    //    struct GpuParticleStaticConstants
    //    {
    //        mat4 _spawn_volume_transform;
    //        vec4 _spawn_volume_info;
    //        vec3 _rotation_min;
    //        float _particle_lifetime_min;
    //        vec3 _rotation_max;
    //        float _particle_lifetime_max;
    //        vec3 _scale_min;
    //        int _spawn_volume_type;
    //        vec3 _scale_max;
    //        int _max_particle_count;
    //        int _align_mode;
    //        int _geometry_type;
    //        int _reserved0;
    //        int _reserved1;
    //    };
    //
    //    struct GpuParticleDynamicConstants
    //    {
    //        mat4 _emitter_transform;
    //        int _spawn_count;
    //        int _allocated_emitter_index;
    //        int _allocated_particle_offset;
    //        int _reserved0;
    //    };
    //        struct GpuParticleUpdateBufferData
    //        {
    //    mat4 _particle_emitter_transform;
    //    vec3 _particle_relative_position;
    //    float _particle_elapsed_time;
    //    vec3 _particle_local_position;
    //    float _particle_initial_life_time;
    //    vec3 _particle_initial_rotation;
    //    float _reserved0;
    //    vec3 _particle_initial_scale;
    //    float _reserved1;
    //        };

    //        float _particle_lifetime_min;
    //        vec3 _rotation_max;
    //        float _particle_lifetime_max;
    //        vec3 _scale_min;
    //        int _spawn_volume_type;
    //        vec3 _scale_max;

    uint random_seed = uint(mod(scene_constants.TIME, 1.0) * 65535.0) ^ uint(update_buffer_index * emitter_index);
    const float initial_lifetime = mix(
        gpu_particle_static_constants[emitter_index]._particle_lifetime_min,
        gpu_particle_static_constants[emitter_index]._particle_lifetime_max,
        random(random_seed)
    );
    const vec3 initial_rotation = mix(
        gpu_particle_static_constants[emitter_index]._rotation_min,
        gpu_particle_static_constants[emitter_index]._rotation_max,
        generate_random3(random_seed)
    );
    const vec3 initial_scale = mix(
        gpu_particle_static_constants[emitter_index]._scale_min,
        gpu_particle_static_constants[emitter_index]._scale_max,
        generate_random3(random_seed)
    );
    const vec3 initial_velocity = mix(
        gpu_particle_static_constants[emitter_index]._velocity_min,
        gpu_particle_static_constants[emitter_index]._velocity_max,
        generate_random3(random_seed)
    );
    const vec3 initial_force = mix(
        gpu_particle_static_constants[emitter_index]._force_min,
        gpu_particle_static_constants[emitter_index]._force_max,
        generate_random3(random_seed)
    );
    vec3 spawn_position = vec3(random(random_seed), random(random_seed), random(random_seed)) * 2.0 - 1.0;
    spawn_position = (gpu_particle_static_constants[emitter_index]._spawn_volume_transform * vec4(spawn_position, 1.0)).xyz;

    particle_buffer._particle_emitter_transform = gpu_particle_dynamic_constants[emitter_index]._emitter_transform;
    particle_buffer._particle_relative_position;
    particle_buffer._particle_elapsed_time = 0.0;
    particle_buffer._particle_local_position = spawn_position;
    particle_buffer._particle_initial_life_time = initial_lifetime;
    particle_buffer._particle_initial_rotation = initial_rotation;
    particle_buffer._particle_initial_scale = initial_scale;
    particle_buffer._particle_velocity = initial_velocity;
    particle_buffer._particle_initial_force = initial_force;
    particle_buffer._particle_state = PARTICLE_STATE_ALIVE;
}

void update_particle_func(inout GpuParticleUpdateBufferData particle_buffer)
{
    if(particle_buffer._particle_initial_life_time <= particle_buffer._particle_elapsed_time)
    {
        particle_buffer._particle_state &= ~PARTICLE_STATE_ALIVE;
        particle_buffer._particle_state |= PARTICLE_STATE_DEAD;
        return;
    }

    const float delta_time = scene_constants.DELTA_TIME;

    particle_buffer._particle_velocity += particle_buffer._particle_initial_force * delta_time;
    particle_buffer._particle_local_position += particle_buffer._particle_velocity * delta_time;

    mat4 emitter_relative_transform = particle_buffer._particle_emitter_transform;
    emitter_relative_transform[3].xyz -= view_constants.CAMERA_POSITION;

    particle_buffer._particle_relative_position = (emitter_relative_transform * vec4(particle_buffer._particle_local_position, 1.0)).xyz;
}

void main()
{
    const int particle_offset = int(gl_GlobalInvocationID.x);
    if(particle_offset < scene_constants.MAX_PARTICLE_COUNT)
    {
        const int update_buffer_index = pushConstant._gpu_particle_update_buffer_offset + particle_offset;
        if(particle_offset < pushConstant._process_particle_count)
        {
            const int emitter_index = gpu_particle_emitter_index_buffer[particle_offset];
            const int max_particle_count = gpu_particle_static_constants[emitter_index]._max_particle_count;
            const float max_particle_lifetime = gpu_particle_static_constants[emitter_index]._particle_lifetime_max;
            const uint count_buffer_index = pushConstant._gpu_particle_count_buffer_offset + emitter_index;
            const int particle_buffer_offset = gpu_particle_count_buffer[count_buffer_index]._particle_buffer_offset;
            const int particle_alive_count = gpu_particle_count_buffer[count_buffer_index]._particle_alive_count;
            const int prev_particle_alive_count = gpu_particle_count_buffer[count_buffer_index]._prev_particle_alive_count;
            const int spawned_count = particle_alive_count - prev_particle_alive_count;
            const int local_particle_index = particle_offset - gpu_particle_dynamic_constants[emitter_index]._allocated_particle_offset;
            int prev_update_buffer_index = pushConstant._prev_gpu_particle_update_buffer_offset + gpu_particle_dynamic_constants[emitter_index]._prev_allocated_particle_offset;
            prev_update_buffer_index = prev_update_buffer_index + (local_particle_index + particle_buffer_offset) % max_particle_count;

            GpuParticleUpdateBufferData particle_buffer = gpu_particle_update_buffer[prev_update_buffer_index];

            if (local_particle_index < particle_alive_count)
            {
                if (0 < spawned_count && prev_particle_alive_count <= local_particle_index)
                {
                    spawn_particle_func(particle_buffer, update_buffer_index, emitter_index);
                }

                if (check_flags_all(PARTICLE_STATE_ALIVE, particle_buffer._particle_state))
                {
                    update_particle_func(particle_buffer);
                }

                if (check_flags_all(PARTICLE_STATE_DEAD, particle_buffer._particle_state))
                {
                    if (max_particle_lifetime <= particle_buffer._particle_elapsed_time)
                    {
                        atomicAdd(gpu_particle_count_buffer[count_buffer_index]._particle_dead_count, 1);
                    }
                }

                particle_buffer._particle_elapsed_time += scene_constants.DELTA_TIME;
            }
            else
            {
                particle_buffer._particle_elapsed_time = 0.0;
                particle_buffer._particle_state = PARTICLE_STATE_NONE;
            }
            gpu_particle_update_buffer[update_buffer_index] = particle_buffer;
        }
        else
        {
            gpu_particle_update_buffer[update_buffer_index]._particle_elapsed_time = 0.0;
            gpu_particle_update_buffer[update_buffer_index]._particle_state = PARTICLE_STATE_NONE;
        }
    }
}
